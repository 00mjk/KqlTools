<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
	<TargetFrameworks>net462;netcoreapp3.1</TargetFrameworks>
	<RuntimeFrameworkVersion>3.0.0</RuntimeFrameworkVersion>
	<RuntimeIdentifiers>linux-x64;win-x64</RuntimeIdentifiers>
	<!-- Use the single RuntimeIdentifier definition for debugging purposes -->  
	<!--<RuntimeIdentifier>win-x64</RuntimeIdentifier>-->	  
	<Platforms>AnyCPU;x64</Platforms>
	<PlatformTarget>x64</PlatformTarget>	  
	<HighEntropyVA>true</HighEntropyVA>
	<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
	<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
	<IsPackable>false</IsPackable>                                                                                                 
	<SpaRoot>ClientApp\</SpaRoot>
	<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
	  
	<!-- Set this to true if you enable server-side prerendering -->
	<BuildServerSideRenderer>false</BuildServerSideRenderer>
	<LangVersion>8.0</LangVersion>
	<DefineConstants Condition="'$(RuntimeIdentifier)' == 'win-x64'">$(DefineConstants);BUILT_FOR_WINDOWS</DefineConstants>
	<DefineConstants Condition="'$(RuntimeIdentifier)' == 'linux-x64'">$(DefineConstants);BUILT_FOR_LINUX</DefineConstants>
  </PropertyGroup>

  <!--NET 462 references, compilation flags and build options -->
  <ItemGroup Condition="'$(TargetFramework)' == 'net462' ">
    <Reference Include="mscorlib" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp3.1' ">
    <PackageReference Include="Microsoft.Azure.Kusto.Ingest.NETStandard" Version="6.2.2" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net462' ">
	  <PackageReference Include="Microsoft.Azure.Kusto.Ingest" Version="8.1.5" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.CommandLineUtils" Version="1.1.1" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
	<!-- The following two references are needed only when we are building for Windows. For linux exclude these Windows specific references -->  
	<PackageReference Include="Tx.Windows" Version="3.0.6" Condition="'$(RuntimeIdentifier)'=='win-x64'" />
    <PackageReference Include="Tx.Windows.Logs" Version="3.0.3" Condition="'$(RuntimeIdentifier)'=='win-x64'" />
  </ItemGroup>

  <ItemGroup>
    <None Update="filter.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="ProcessCreation.csl">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="SecurityEvents.evtx">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="SummarizeQuery.csl">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="TraficByIP.csl">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="WecFilter.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
	<!-- The following reference is needed only when we are building for Windows. For linux exclude these Windows specific references -->
	<ProjectReference Include="..\EvtxEventXmlScrubber\EvtxEventXmlScrubber.csproj" Condition="'$(RuntimeIdentifier)'=='win-x64'" />
    <ProjectReference Include="..\Microsoft.Syslog\Microsoft.Syslog.csproj" />
    <ProjectReference Include="..\Rx.Kql\Rx.Kql.csproj" />
  </ItemGroup>
	
  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**;$(SpaRoot)dist\**" />
  </ItemGroup>
	
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') And '$(TargetFramework)' == 'net462'  ">
	  <!-- Ensure Node.js is installed -->
	  <Exec Command="node --version" ContinueOnError="true">
		  <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
	  </Exec>
	  <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
	  <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
	  <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />  
  </Target>

  <!-- Build the Client even before each of the Target frameworks are built-->	
  <Target Name="OuterPreBuild" BeforeTargets="DispatchToInnerBuilds">
	  <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
	  <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
	  <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

	  <!-- Include the newly-built files in the publish output -->
	  <ItemGroup>
		  <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
		  <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
		  <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
			  <RelativePath>%(DistFiles.Identity)</RelativePath>
			  <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		  </ResolvedFileToPublish>
	  </ItemGroup>
  </Target>

  <!-- Copy the Angular Application output to bin folder -->	
  <Target Name="CopyAngularOutput" AfterTargets="CopyFilesToOutputDirectory">
	  <ItemGroup>
		  <AngularOutput Include="$(SpaRoot)dist\**\*.*" />
	  </ItemGroup>
	  <Copy SourceFiles="@(AngularOutput)" DestinationFolder="$(OutDir)\%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>
	
</Project>
